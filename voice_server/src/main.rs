mod routes;
mod services;
use axum::{routing::post, Router, extract::Multipart};
use routes::audio::handle_audio;
use std::{net::SocketAddr, sync::Arc, process::Command, thread, time::Duration};
use tokio;
use vosk::Model;
use reqwest::Client;
use serde_json::json;

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Ollama
async fn is_ollama_running() -> bool {
    let client = Client::new();
    let url = "http://localhost:11434/api/generate";

    let body = json!({
        "model": "deepseek-r1:1.5b",
        "prompt": "–ü—Ä–∏–≤–µ—Ç!",
        "stream": false
    });

    client.post(url).json(&body).send().await.is_ok()
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç Ollama, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
fn start_ollama() {
    if !std::path::Path::new("AI/").exists() {
        panic!("‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ AI/ollama –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    println!("üöÄ –ó–∞–ø—É—Å–∫ Ollama...");
    let mut cmd = Command::new("AI/ollama")
        .arg("serve")
        .spawn()
        .expect("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama!");

    thread::sleep(Duration::from_secs(2)); // –ñ–¥—ë–º –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    println!("‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω!");

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    std::thread::spawn(move || {
        cmd.wait().expect("‚ùå Ollama –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!");
    });
}

#[tokio::main]
async fn main() {
    println!("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...");

    if !is_ollama_running().await {
        start_ollama();
        tokio::time::sleep(Duration::from_secs(5)).await; // –ü–æ–¥–æ–∂–¥—ë–º –∑–∞–ø—É—Å–∫
    } else {
        println!("‚úÖ Ollama —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    }

    println!("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ VOSK...");
    let model = Arc::new(Model::new("models").expect("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ VOSK"));
    println!("‚úÖ –ú–æ–¥–µ–ª—å VOSK –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º async move –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    let app = Router::new().route("/api/audio", post({
        let model = model.clone();
        move |multipart: Multipart| {
            let model = model.clone();
            async move {
                handle_audio(multipart, model).await
            }
        }
    }));

    let addr = SocketAddr::from(([0, 0, 0, 0], 8080));
    println!("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://{}", addr);

    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}
